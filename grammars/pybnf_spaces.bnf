<suite> ::= <INDENT><NEWLINE><suite1><DEDENT> | <NEWLINE><stmt_list>
<atom> ::= <identifier> | <literal> | <enclosure> | "None" | "True" | "False"
<enclosure> ::= <parenth_form> | <list_display> | <generator_expression> | <dict_display> | <string_conversion> | <yield_atom>
<literal> ::= <stringliteral> | <integer> | <longinteger> | <floatnumber> | <imagnumber>
<stringliteral> ::= <stringliteralpiece> | <stringliteral><stringliteralpiece>
<parenth_form> ::= "()" | "("<expression_list>")"
<list_display> ::= "[]" | "["<expression_list>"]" | "["<list_comprehension>"]"
<list_comprehension> ::= <expression><list_for>
<list_for> ::= "for "<target_list>" in "<old_expression_list> | "for "<target_list>" in "<old_expression_list><list_iter>
<old_expression_list> ::= <old_expression> | <old_expression><old_expression_list1> | <old_expression><old_expression_list1>", "
<old_expression_list1> ::= ", "<old_expression> | <old_expression_list1>", "<old_expression>
<list_iter> ::= <list_for> | <list_if>
<list_if> ::= "if "<old_expression> | "if "<old_expression><list_iter>
<generator_expression> ::= "("<expression><genexpr_for>")"
<genexpr_for> ::= "for "<target_list>" in "<or_test> | "for "<target_list>" in "<or_test><genexpr_iter> # TODO attenzione modificato
<genexpr_iter> ::= <genexpr_for> | <genexpr_if>
<genexpr_if> ::= "if "<old_expression> | "if "<old_expression><genexpr_iter>
<dict_display> ::= "{}" | "{"<key_datum_list>"}"
<key_datum_list> ::= <key_datum> | <key_datum><key_datum_list1> | <key_datum>", " | <key_datum><key_datum_list1>", "
<key_datum_list1> ::= ", "<key_datum> | <key_datum_list1>", "<key_datum>
<key_datum> ::= <expression>":"<expression>
<string_conversion> ::= "`"<expression_list>"`"
<yield_atom> ::= "("<yield_expression>")"
<yield_expression> ::= "yield" | "yield "<expression_list>
<primary> ::= <atom> | <attributeref> | <subscription> | <slicing> | <call> | "("<or_expr>")" | "("<or_expr>")"<m_expr>
<attributeref> ::= <primary>"."<identifier>
<subscription> ::= <primary>"["<expression_list>"]"
<slicing> ::= <simple_slicing> | <extended_slicing>
<simple_slicing> ::= <primary>"["<short_slice>"]"
<extended_slicing> ::= <primary>"["<slice_list>"]" | <primary>"["<slice_list>"]"<slice_list>
<slice_list> ::= <slice_item> | <slice_item><slice_list1> | <slice_item>", " | <slice_item><slice_list1>", "
<slice_list1> ::= ", "<slice_item> | <slice_list1>", "<slice_item>
<slice_item> ::= <expression> | <proper_slice> | <ellipsis>
<proper_slice> ::= <short_slice> | <long_slice>
<short_slice> ::= ":" | <lower_bound>":" | ":"<upper_bound> | <lower_bound>":"<upper_bound>
<long_slice> ::= <short_slice>":" | <short_slice>":"<stride>
<lower_bound> ::= <expression>
<upper_bound> ::= <expression>
<stride> ::= <expression>
<ellipsis> ::= "..."
<call> ::= <call_defined>"("<argument_list>")" | <call_defined>"("<argument_list>")."<call> | <call_defined>"()" | <call_defined>"("<call>")" | <primary>"()" | <primary>"("<argument_list>")" | <primary>"("<argument_list>", )" | <primary>"("<expression><genexpr_for>")" | <primary>"["<argument_list>"]" | <primary>"("<argument_list>")."<call>
<call_defined> ::= "range" | "len" | "abs" | "round" | "min" | "max" | "sorted" | "item" | "append" | "remove" | "pop" | "sum" | "upper" | "lower" | "str" | "int" | "split" | "enumerate" | "strip" | "join" | "replace" | "type"
<argument_list> ::= <positional_arguments> | <positional_arguments>", "<keyword_arguments> | <positional_arguments>", *"<expression> | <positional_arguments>", **"<expression> | <positional_arguments>", "<keyword_arguments>", *"<expression> | <positional_arguments>", "<keyword_arguments>", **"<expression> | <positional_arguments>", *"<expression>", **"<expression> | <keyword_arguments> | <keyword_arguments>", *"<expression> | <keyword_arguments>", **"<expression> | <keyword_arguments>", *"<expression>", **"<expression> | "*"<expression> | "*"<expression>", **"<expression> | "**"<expression>
<positional_arguments> ::= <expression> | <expression><positional_arguments1>
<positional_arguments1> ::= ", "<expression> | <positional_arguments1>", "<expression>
<keyword_arguments> ::= <keyword_item> | <keyword_item><keyword_arguments1>
<keyword_arguments1> ::= ", "<keyword_item> | <keyword_arguments1>", "<keyword_item>
<keyword_item> ::= <identifier>" = "<expression>
<power> ::= <primary> | <primary>" ** "<u_expr>
<u_expr> ::= <power> | " - "<u_expr> | " + "<u_expr> | " ~ "<u_expr> | " / "<u_expr> | " * "<u_expr> | " ** "<u_expr> # TODO ultimi tre aggiunti io
<m_expr> ::= <u_expr> | <m_expr>" * "<u_expr> | <m_expr>" // "<u_expr> | <m_expr>" / "<u_expr> | <m_expr>" % "<u_expr>
<a_expr> ::= <m_expr> | <a_expr>" + "<m_expr> | <a_expr>" - "<m_expr>
<shift_expr> ::= <a_expr> | <shift_expr>" << "<a_expr> | <shift_expr>" >> "<a_expr>
<and_expr> ::= <shift_expr> | <and_expr>" & "<shift_expr>
<xor_expr> ::= <and_expr> | <xor_expr>" ^ "<and_expr>
<or_expr> ::= <xor_expr> | <or_expr>" | "<xor_expr>
<comparison> ::= <or_expr> | <or_expr><comparison1>
<comparison1> ::= <comp_operator><or_expr> | <comparison1><comp_operator><or_expr>
<comp_operator> ::= " < " | " > " | " == " | " >= " | " <= " | " <> " | " != " | " is " | " is not " | " in " | " not in "
<expression> ::= <conditional_expression> | <lambda_form>
<old_expression> ::= <or_test> | <old_lambda_form>
<conditional_expression> ::= <or_test> | <or_test>" if "<or_test>" else "<expression> | <or_test>" for "<target_list>" in "<or_expr> | <or_test>" for "<target_list>" in "<or_expr>" if "<expression>" "<stmt_list> | <or_test>" for "<target_list>" in "<or_expr>" if "<expression>" "<stmt_list>" else "<stmt_list>
<or_test> ::= <and_test> | <or_test>" or "<and_test>
<and_test> ::= <not_test> | <and_test>" and "<not_test>
<not_test> ::= <comparison> | "not "<not_test>
<lambda_form> ::= "lambda: "<expression> | "lambda "<parameter_list>":"<expression>
<old_lambda_form> ::= "lambda: "<old_expression> | "lambda "<parameter_list>":"<old_expression>
<expression_list> ::= <expression> | <expression>", " | <expression><expression_list1> | <expression><expression_list1>", "
<expression_list1> ::= ", "<expression> | <expression_list1>", "<expression>
<simple_stmt> ::= <expression_stmt> | <assert_stmt> | <assignment_stmt> | <augmented_assignment_stmt> | <pass_stmt> | <del_stmt> | <print_stmt> | <return_stmt> | <yield_stmt> | <raise_stmt> | <break_stmt> | <continue_stmt> | <import_stmt> | <global_stmt> | <exec_stmt>
<expression_stmt> ::= <expression_list>
<assert_stmt> ::= "assert "<expression> | "assert "<expression>", "<expression>
<assignment_stmt> ::= <assignment_stmt1><expression_list> | <assignment_stmt1><yield_expression> | <target_list><augop><expression_list> # TODO questo ultimo lo aggiunto io perch√® altrimenti augop non lo vedeva e non so se neanche vede il tag padre per motivi a me ingnoti
<assignment_stmt1> ::= <target_list>" = " | <assignment_stmt1><target_list>" = "
<target_list> ::= <target> | <target><target_list1> | <target><target_list1>", "
<target_list1> ::= ", "<target> | <target_list1>", "<target>
<target> ::= <identifier> | "("<target_list>")" | "["<target_list>"]" | <attributeref> | <subscription> | <slicing>
<augmented_assignment_stmt> ::= <target><augop><expression_list> | <target><augop><yield_expression> | <subscription><augop><expression_list>
<augop> ::= " += " | " -= " | " *= " | " /= " | " //= " | " %= " | " **= " | " >>= " | " <<= " | " &= " | " ^= " | " |= "
<pass_stmt> ::= "pass"
<del_stmt> ::= "del "<target_list>
<print_stmt> ::= "print("<expression>")" | "print(f"<simple_stmt>")"
<print_stmn1> ::= ", "<expression> | <print_stmn1>", "<expression>
<return_stmt> ::= "return" | "return "<expression_list>
<yield_stmt> ::= <yield_expression>
<raise_stmt> ::= "raise" | "raise "<expression> | "raise "<expression>", "<expression> |  "raise "<expression>", "<expression>", "<expression> 
<break_stmt> ::= "break"
<continue_stmt> ::= "continue"
<import_stmt> ::= "import "<module> | "import "<module>" as "<name> | "import "<module><import_stmt1> | "import "<module>" as "<name><import_stmt1> | "from "<relative_module>" import "<identifier> | "from "<relative_module>" import "<identifier>" as "<name> | "from "<relative_module>" import "<identifier><import_stmt2> | "from "<relative_module>" import "<identifier>" as "<name><import_stmt2> | "from "<relative_module>" import ("<identifier>")" | "from "<relative_module>" import ("<identifier>" as "<name>")" | "from "<relative_module>" import ("<identifier><import_stmt2>")" | "from "<relative_module>" import ("<identifier>", )" | "from "<relative_module>" import ("<identifier>" as "<name>", )" | "from "<relative_module>" import ("<identifier>" as "<name><import_stmt2>")" | "from "<relative_module>" import ("<identifier><import_stmt2>", )" | "from "<relative_module>" import ("<identifier>" as"<name><import_stmt2>", )" | "from "<module> "import *"
<import_stmt1> ::= ", "<module> | <import_stmt1>", "<module> | ", "<module>" as "<name> | <import_stmt1>", "<module>" as "<name>
<import_stmt2> ::= ", "<identifier> | <import_stmt2>", "<identifier> | ", "<identifier>" as "<name> | <import_stmt2>", "<identifier>" as "<name>
<module> ::= <identifier> | <module1><identifier>
<module1> ::= <identifier>"." | <module1><identifier>"."
<relative_module> ::= <module> | <relative_module1><module> | <relative_module1>
<relative_module1> ::= "." | <relative_module1>"."
<name> ::= <identifier>
<global_stmt> ::= "global "<identifier> | "global "<identifier><global_stmt1>
<global_stmt1> ::= ", "<identifier> | <global_stmt1>", "<identifier>
<exec_stmt> ::= "exec "<or_expr> | "exec "<or_expr>" in "<expression> | "exec "<or_expr>" in "<expression>", "<expression>
<compound_stmt> ::= <if_stmt> | <while_stmt> | <for_stmt> | <try_stmt> | <with_stmt> | <funcdef> | <classdef>
<suite1> ::= <statement> | <suite1><statement>
<statement> ::= <stmt_list><NEWLINE> | <compound_stmt>
<stmt_list> ::= <simple_stmt> | <simple_stmt>";" | <simple_stmt><stmt_list1> | <simple_stmt><stmt_list1>";"
<stmt_list1> ::= ";"<simple_stmt> | <stmt_list1>";"<simple_stmt>
<if_stmt> ::= "if "<expression>":"<suite> | "if "<expression>":"<suite>"else:"<suite> | "if "<expression>":"<suite><if_stmt1> | "if "<expression>":"<suite><if_stmt1>"else:"<suite>
<if_stmt1> ::= "elif "<expression>":"<suite> | <if_stmt1>"elif "<expression>":"<suite>
<while_stmt> ::= "while "<expression>":"<suite> | "while "<expression>":"<suite>"else :"<suite>
<for_stmt> ::= "for "<target_list>" in "<or_expr>":"<suite> | "for "<target_list>" in "<or_expr>":"<suite>"else :"<suite> # TODO attenzione expression_list sostituito con or_expr perch√® altrimneti non si poteva nidificare con compount_stmt diversi. Trovato totalmente a caso. Non ho idea del perche. Forse un bene perch√® effettivamente non ha senso dargli tutta quella variabilit√† (ma non so da indagare)
<try_stmt> ::=  <try1_stmt> | <try2_stmt>
<try1_stmt> ::= "try:"<suite><try1_stmt1> | "try:"<suite><try1_stmt1>"else:"<suite> | "try:"<suite><try1_stmt1>"finally:"<suite> | "try:"<suite><try1_stmt1>"else:"<suite>"finally:"<suite>
<try1_stmt1> ::= "except "<try1_stmnt2>":"<suite> | <try1_stmt1>"except "<try1_stmnt2>":"<suite> | "except:"<suite>
<try1_stmnt2> ::= <expression> | <expression>", "<target>
<try2_stmt> ::= "try:"<suite>"finally:"<suite>
<with_stmt> ::= "with "<expression>":"<suite> | "with "<expression>" as "<target>":"<suite>
<funcdef> ::= "def "<funcname>"():"<suite> | <decorators>"def "<funcname>"():"<suite> | "def "<funcname>"("<parameter_list>"):"<suite> | <decorators>"def "<funcname>"("<parameter_list>"):"<suite>
<decorators> ::= <decorator> | <decorators><decorator>
<decorator> ::= "@"<dotted_name><NEWLINE> | "@"<dotted_name>"()"<NEWLINE> | "@"<dotted_name>"("<argument_list>")"<NEWLINE> | "@"<dotted_name>"("<argument_list>", )"<NEWLINE>
<dotted_name> ::= <identifier> | <identifier><dotted_name1>
<dotted_name1> ::= "."<identifier> | <dotted_name1>"."<identifier>
<parameter_list> ::=  "*"<identifier> | "*"<identifier>", **"<identifier> | "**"<identifier> | <defparameter> | <defparameter>", " | <parameter_list1>"*"<identifier> | <parameter_list1>"*"<identifier>", **"<identifier> | <parameter_list1>"**"<identifier> | <parameter_list1><defparameter> | <parameter_list1><defparameter>", " #TODO uguale a quello sotto
<parameter_list1> ::= <defparameter>", " | <parameter_list1><defparameter>", "
<defparameter> ::= <parameter> | <parameter>" = "<expression>
<sublist> ::= <parameter> | <parameter>", " | <parameter><sublist1> | <parameter><sublist1>", "
<sublist1> ::= ", "<parameter> | <sublist1>", "<parameter>
<parameter> ::= <identifier> | "("<sublist>")"
<funcname> ::= <identifier> # FIXME meglio "evolve"
<classdef> ::= "class "<classname>":"<suite> | "class "<classname><inheritance>":"<suite>
<inheritance> ::= "()" | "("<expression_list>")"
<classname> ::= <identifier>
<interactive_input> ::= <NEWLINE> | <stmt_list><NEWLINE> | <compound_stmt><NEWLINE>
<NEWLINE> ::= "#" # "##" # TODO questo ultimo √® stato messo per riuscire a gestire due newline che si usa mettere dopo delle funzioni
<INDENT> ::= "{:"
<DEDENT> ::= ":}"
<identifier> ::= <identifier1> | <identifier><identifier3> | "_" # TODO molto stano con originale non va
<identifier1> ::= <letter> | "_"
<identifier2> ::= <letter> | <digit> | "_"
<identifier3> ::= <identifier2> | <identifier3><identifier2>
<letter> ::= <lowercase> | <uppercase>
<lowercase> ::= 'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z'
<uppercase> ::=  'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|'M'|'N'|'O'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'
<digit> ::=  '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
<stringliteralpiece> ::= <shortstring> | <longstring> | <rawshortstring> | <rawlongstring> | <rawstringprefix><rawshortstring> | <rawstringprefix><rawlongstring>
<rawstringprefix> ::= "r" | "ur" | "R" | "UR" | "Ur" | "uR"
<shortstring> ::= "''" | "'"<shortstring1>"'" | "'"<shortstring2>"'"
<shortstring1> ::= <shortstringitem1> | <shortstring1><shortstringitem1>
<shortstring2> ::= <shortstringitem2> | <shortstring2><shortstringitem2>
<rawshortstring> ::= "''" | "'"<rawshortstring1>"'" | "'"<rawshortstring2>"'"
<rawshortstring1> ::= <rawshortstringitem1> | <rawshortstring1><rawshortstringitem1>
<rawshortstring2> ::= <rawshortstringitem2> | <rawshortstring2><rawshortstringitem2>
<longstring> ::= "'''"<string_literal>"'''" | '"""'<string_literal>'"""' 
<rawlongstring> ::= "'''"<string_literal>"'''" | '"""'<string_literal>'"""' 
<shortstringitem1> ::= <string_literal> | '"' | <escapeseq>
<shortstringitem2> ::= <string_literal> | "'" | <escapeseq>
<longstringitem> ::= <string_literal> | <escapeseq>
<escapeseq> ::= "\\"<escapeseq_ascii> | "\\"<escapeseq_octal>
<escapeseq_ascii> ::= '000'|'001'|'002'|'003'|'004'|'005'|'006'|'007'|'008'|'009'|'010'|'011'|'012'|'013'|'014'|'015'|'016'|'017'|'018'|'019'|'020'|'021'|'022'|'023'|'024'|'025'|'026'|'027'|'028'|'029'|'030'|'031'|'032'|'033'|'034'|'035'|'036'|'037'|'038'|'039'|'040'|'041'|'042'|'043'|'044'|'045'|'046'|'047'|'048'|'049'|'050'|'051'|'052'|'053'|'054'|'055'|'056'|'057'|'058'|'059'|'060'|'061'|'062'|'063'|'064'|'065'|'066'|'067'|'068'|'069'|'070'|'071'|'072'|'073'|'074'|'075'|'076'|'077'|'078'|'079'|'080'|'081'|'082'|'083'|'084'|'085'|'086'|'087'|'088'|'089'|'090'|'091'|'092'|'093'|'094'|'095'|'096'|'097'|'098'|'099'|'100'|'101'|'102'|'103'|'104'|'105'|'106'|'107'|'108'|'109'|'110'|'111'|'112'|'113'|'114'|'115'|'116'|'117'|'118'|'119'|'120'|'121'|'122'|'123'|'124'|'125'|'126'|'127'|'128'|'129'|'130'|'131'|'132'|'133'|'134'|'135'|'136'|'137'|'138'|'139'|'140'|'141'|'142'|'143'|'144'|'145'|'146'|'147'|'148'|'149'|'150'|'151'|'152'|'153'|'154'|'155'|'156'|'157'|'158'|'159'|'160'|'161'|'162'|'163'|'164'|'165'|'166'|'167'|'168'|'169'|'170'|'171'|'172'|'173'|'174'|'175'|'176'|'177'|'178'|'179'|'180'|'181'|'182'|'183'|'184'|'185'|'186'|'187'|'188'|'189'|'190'|'191'|'192'|'193'|'194'|'195'|'196'|'197'|'198'|'199'|'200'|'201'|'202'|'203'|'204'|'205'|'206'|'207'|'208'|'209'|'210'|'211'|'212'|'213'|'214'|'215'|'216'|'217'|'218'|'219'|'220'|'221'|'222'|'223'|'224'|'225'|'226'|'227'|'228'|'229'|'230'|'231'|'232'|'233'|'234'|'235'|'236'|'237'|'238'|'239'|'240'|'241'|'242'|'243'|'244'|'245'|'246'|'247'|'248'|'249'|'250'|'251'|'252'|'253'|'254'|'255'
<escapeseq_octal> ::= '000'|'001'|'002'|'003'|'004'|'005'|'006'|'007'|'010'|'011'|'012'|'013'|'014'|'015'|'016'|'017'|'020'|'021'|'022'|'023'|'024'|'025'|'026'|'027'|'030'|'031'|'032'|'033'|'034'|'035'|'036'|'037'|'040'|'041'|'042'|'043'|'044'|'045'|'046'|'047'|'050'|'051'|'052'|'053'|'054'|'055'|'056'|'057'|'060'|'061'|'062'|'063'|'064'|'065'|'066'|'067'|'070'|'071'|'072'|'073'|'074'|'075'|'076'|'077'|'100'|'101'|'102'|'103'|'104'|'105'|'106'|'107'|'110'|'111'|'112'|'113'|'114'|'115'|'116'|'117'|'120'|'121'|'122'|'123'|'124'|'125'|'126'|'127'|'130'|'131'|'132'|'133'|'134'|'135'|'136'|'137'|'140'|'141'|'142'|'143'|'144'|'145'|'146'|'147'|'150'|'151'|'152'|'153'|'154'|'155'|'156'|'157'|'160'|'161'|'162'|'163'|'164'|'165'|'166'|'167'|'170'|'171'|'172'|'173'|'174'|'175'|'176'|'177'|'200'|'201'|'202'|'203'|'204'|'205'|'206'|'207'|'210'|'211'|'212'|'213'|'214'|'215'|'216'|'217'|'220'|'221'|'222'|'223'|'224'|'225'|'226'|'227'|'230'|'231'|'232'|'233'|'234'|'235'|'236'|'237'|'240'|'241'|'242'|'243'|'244'|'245'|'246'|'247'|'250'|'251'|'252'|'253'|'254'|'255'|'256'|'257'|'260'|'261'|'262'|'263'|'264'|'265'|'266'|'267'|'270'|'271'|'272'|'273'|'274'|'275'|'276'|'277'|'300'|'301'|'302'|'303'|'304'|'305'|'306'|'307'|'310'|'311'|'312'|'313'|'314'|'315'|'316'|'317'|'320'|'321'|'322'|'323'|'324'|'325'|'326'|'327'|'330'|'331'|'332'|'333'|'334'|'335'|'336'|'337'|'340'|'341'|'342'|'343'|'344'|'345'|'346'|'347'|'350'|'351'|'352'|'353'|'354'|'355'|'356'|'357'|'360'|'361'|'362'|'363'|'364'|'365'|'366'|'367'|'370'|'371'|'372'|'373'|'374'|'375'|'376'|'377'
<rawshortstringitem1> ::= <string_literal> | "'" | <rawescapeseq> 
<rawshortstringitem2> ::= <string_literal> | '"' | <rawescapeseq>
<rawlongstringitem> ::= <string_literal> | <rawescapeseq> 
<string_literal> ::= ''|'\\\t'|' '|'!'|'$'|'%'|'&'|"\\'"|'('|')'|'*'|'+'|','|'-'|'.'|'/'|'0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|':'|';'|'<'|'='|'>'|'?'|'@'|'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|'M'|'N'|'O'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'|'['|'\\\\'|']'|'^'|'_'|'`'|'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z'|'{'|'|'|'}'
<rawescapeseq> ::= '\\'<escapeseq> 
<longinteger> ::= <integer>"l" | <integer>"L"
<integer> ::= <decimalinteger> | <octinteger> | <hexinteger>
<decimalinteger> ::= <digit> | <decimalinteger><digit> # TODO non pi√π usato
<decimalinteger1> ::= <digit> | <decimalinteger1><digit>
<octinteger> ::= "0"<octinteger1>
<octinteger1> ::= <octdigit> | <octinteger1> <octdigit>
<hexinteger> ::= "0x"<hexinteger1> | "0X"<hexinteger1> 
<hexinteger1> ::= <hexdigit> | <hexinteger1><hexdigit>
<nonzerodigit> ::= "1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9" # TODO non pi√π usato
<octdigit> ::= "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"
<hexdigit> ::= <digit> | <lowercase> | <uppercase>
<floatnumber> ::= <pointfloat> | <exponentfloat>
<pointfloat> ::= <fraction> | <intpart><fraction> | <intpart>"."
<exponentfloat> ::= <intpart><exponent> | <pointfloat><exponent>
<intpart> ::= <digit> | <intpart><digit>
<fraction> ::= "."<intpart>
<exponent> ::= "e"<intpart> | "E"<intpart> | "e+"<intpart> | "E+"<intpart> | "e-"<intpart> | "E-"<intpart>
<imagnumber> ::= <floatnumber>"j" | <floatnumber>"J" | <intpart>"j" | <intpart>"J"